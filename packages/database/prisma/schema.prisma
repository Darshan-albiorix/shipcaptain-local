generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  output        = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AdminActionType {
  ADMIN_PROMOTION
  ADMIN_CREATION
  ADMIN_DELETION
  ADMIN_UPDATE
  USER_PASSWORD_RESET
  USER_EMAIL_CHANGE
  USER_CREATION
  USER_DELETION
  USER_UPDATE
  CREDIT_CHANGE
  CARRIER_RESET
  CARRIER_ADDED
  CARRIER_ENABLED
  CARRIER_DISABLED
  STRIPE_FUND_ADJUSTED
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rolePermissions RolePermission[]
  users           User[]
  admins          Admin[]
}

model PermissionGroup {
  id         String   @id @default(cuid())
  name       String // e.g. "Billing", "Bins", "Customers"
  orderIndex Int? // optional for sorting
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  permissions Permission[]
}

model Permission {
  id          String   @id @default(cuid())
  groupId     String? // link to PermissionGroup
  name        String // e.g. "Billing Profiles", "Cycle Count Dashboard"
  key         String   @unique // machine key, e.g. "billing_profiles"
  description String?
  canView     Boolean  @default(false)
  canCreate   Boolean  @default(false)
  canEdit     Boolean  @default(false)
  canDelete   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  group           PermissionGroup? @relation(fields: [groupId], references: [id])
  rolePermissions RolePermission[]
}

model RolePermission {
  id           String  @id @default(cuid())
  roleId       String
  permissionId String
  canView      Boolean @default(false)
  canCreate    Boolean @default(false)
  canEdit      Boolean @default(false)
  canDelete    Boolean @default(false)

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

model User {
  id                 String              @id @default(cuid())
  name               String
  email              String              @unique
  roleId             String?
  emailVerified      Boolean
  image              String?
  registeredFromApp  String?
  createdAt          DateTime?           @default(now())
  updatedAt          DateTime?           @updatedAt
  firstTimeSetup     Boolean             @default(false)
  isAdmin            Boolean             @default(false)
  sessions           Session[]
  invitations        Invitation[]
  userCompanyProfile UserCompanyProfile?
  wmsUsers           WMSUsers?
  role               Role?               @relation(fields: [roleId], references: [id])

  @@map("user")
}

model UserCompanyProfile {
  id            Int       @id @default(autoincrement())
  companyName   String
  companyPhone  String?
  addressLine1  String?
  addressLine2  String?
  city          String?
  stateProvince String?
  postalCode    String?
  country       String?
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
  ownerId       String    @unique
  owner         User      @relation(fields: [ownerId], references: [id])

  @@map("user_company_profile")
}

model WMSUsers {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wms_users")
}

model Session {
  id                   String    @id @default(cuid())
  expiresAt            DateTime
  token                String    @unique
  createdAt            DateTime? @default(now())
  updatedAt            DateTime? @updatedAt
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?

  @@map("session")
}

model Invitation {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  status         String
  expiresAt      DateTime
  companyId      String?
  company        Company?     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?    @updatedAt
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Organization {
  id            String         @id @default(cuid())
  name          String
  slug          String?
  logo          String?
  metadata      String?
  companyPhone  String?
  street1       String?
  street2       String?
  city          String?
  state         String?
  zipCode       String?
  country       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  pro           Boolean        @default(false)
  locations     Location[]
  locationTypes LocationType[]
  invitations   Invitation[]
  companies     Company[]

  @@unique([slug])
  @@map("organization")
}

model Location {
  id             String       @id @default(cuid())
  name           String
  description    String?
  status         String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  parentId       String?
  organizationId String
  locationTypeId String
  parent         Location?    @relation("LocationHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  locationType   LocationType @relation(fields: [locationTypeId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  children       Location[]   @relation("LocationHierarchy")

  @@unique([organizationId, parentId, name])
  @@map("location")
}

model LocationType {
  id             String       @id @default(cuid())
  name           String
  description    String?
  createAt       DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  pickType       Boolean      @default(false)
  organization   Organization @relation(fields: [organizationId], references: [id])
  tag            String[]
  locations      Location[]

  @@unique([organizationId, name])
  @@map("location_type")
}

model Admin {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  email     String   @unique
  firstName String?
  lastName  String?
  isActive  Boolean  @default(true)
  avatar    String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ðŸ”— New relation to Role
  roleId String? @db.Text
  role   Role?   @relation(fields: [roleId], references: [id], onDelete: SetNull)

  // Existing relations
  actionLogs  AdminActionLog[]
  ipHistories IPHistory[]
  LogComment  LogComment[]

  @@map("admin")
}

model AdminActionLog {
  logId      String          @id
  adminId    String
  actionType AdminActionType
  userId     String?
  notes      String?
  timestamp  DateTime        @default(now())
  admin      Admin           @relation(fields: [adminId], references: [id], onDelete: Cascade)
  LogComment LogComment[]

  @@map("AdminActionLog")
}

model IPHistory {
  id         String    @id
  ipAddress  String
  loginTime  DateTime  @default(now())
  logoutTime DateTime?
  userId     String
  admin      Admin     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("IPHistory")
}

model LogComment {
  id        String         @id
  logId     String
  adminId   String
  content   String
  createdAt DateTime       @default(now())
  admin     Admin          @relation(fields: [adminId], references: [id], onDelete: Cascade)
  log       AdminActionLog @relation(fields: [logId], references: [logId], onDelete: Cascade)
}

model Company {
  id             String       @id @default(cuid())
  name           String
  street         String?
  street2        String?
  city           String?
  state          String?
  country        String?
  website        String?
  email          String?
  phone          String?
  logo           String?
  postalCode     String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  Invitation     Invitation[]

  @@map("company")
}